duplicate_switch <- function (data, param_name, param_domain)
{
if (length(param_domain) > 0 & !is.null(param_domain)) {
tmpcol <- colnames(data)
data <- data[rep(1:.N, length(param_domain))][, `:=`((param_name),
param_domain), by = tmpcol]
}
else {
data[, `:=`((param_name), 0)]
}
return(data)
}
GDPs_full_grid <- do.call(create_ensemble_grid, ensemble_metadata)
fwrite(GDPs_full_grid, "~/grid2.csv")
fwrite(GDPs_full_grid, "/Users/zlavogb/Desktop/grid2.csv")
ensemble_metadata <- list(
yvar = c(yvv), # , 'ln_gdppc'),
# xvar = paste0("FE_", c( # "ln_pop", "logit_pop15",
#   # "logit_pop65",
#   "ln_TFR",
#   "edu"
# )),
xvar = NULL,
re_coef = NULL,
ar = c(1, 2, 3),
ar_mod = c(0, 1),
ma = c(0),
ma_mod = 0,
weight_decays = c(0, 0.7, length.out = 12) ,
# weight_decays = c(0, 0.5, 1., 1.25 ),
global_int = 1, country_int = 1, country_int_dist = 1,
fdiff = 1,
conv = c(0),
scaled_lev_conv = c( 0, 1),
ar_constrain = 0,
int_decay = 1
)
GDPs_full_grid <- do.call(create_ensemble_grid, ensemble_metadata)
c("iso3", "year", paste0("draw_", 1:10))
ensemble_metadata <- list(
yvar = c(yvv),
xvar = paste0("FE_", c("ln_ldipc")),
re_coef = NULL,
ar = c(0, 1, 2, 3), # GDP uses (2,3), GHE uses (0,1,2),
ar_mod = c(1),
ma = c(0),
ma_mod = c(0, 1), # GDP uses 0, but most other spending sources use 1
weight_decays = seq(0.0, 0.2, length.out = 15), # this is the one used by most spending sources
global_int = 1, country_int = 1, country_int_dist = 1,
fdiff = 1,
conv = c(0),
scaled_lev_conv = c( 0, 1),
ar_constrain = 0,
int_decay = 1
)
variable <- "the"
comment <- "V11_nats_ensemble"
date <- "20190917"
yvv <- "ln_thepc"
chaos <- T
if (chaos) {
cha <- "Add Chaos"
} else {
cha <- "No Chaos"
}
comment_long <- paste0(cha, ", USD; ", date, " ", yvv, "; run all nationals together, and only keep national models for 4 countries for applying to subnats")
## Prep empty folders and return root
root_fold <- prep_model(variable, comment, date, erase = F)
## Set forecasting year cutoff info
start_year <- 1995
end_fit <- 2019
end_FC <- 2050
oos_years <- 10
N_draws <- 1000
chaos_percent <- 15
## Pack all the metadata in a list
metadata_list <- list(
variable = variable,
date = date,
comment = comment,
comment_long = comment_long,
start_year = start_year,
end_fit = end_fit,
end_FC = end_FC,
oos_years = oos_years,
chaos = chaos,
N_draws = 1000
)
ensemble_metadata <- list(
yvar = c(yvv),
xvar = paste0("FE_", c("ln_ldipc")),
re_coef = NULL,
ar = c(0, 1, 2, 3), # GDP uses (2,3), GHE uses (0,1,2),
ar_mod = c(1),
ma = c(0),
ma_mod = c(0, 1), # GDP uses 0, but most other spending sources use 1
weight_decays = seq(0.0, 0.2, length.out = 15), # this is the one used by most spending sources
global_int = 1, country_int = 1, country_int_dist = 1,
fdiff = 1,
conv = c(0),
scaled_lev_conv = c( 0, 1),
ar_constrain = 0,
int_decay = 1
)
create_ensemble_grid <- function (yvar, xvar, re_coef = NULL, ar = c(0), ar_mod = c(2),
ma = c(0), ma_mod = c(2), weight_decays = c(0), global_int = 1,
country_int = 1, country_int_dist = 1, fdiff = c(1), conv = c(0,
1), scaled_lev_conv = c(0), ar_constrain = 0, int_decay = 0)
{
if (!is.null(ar_mod) & is.null(ar)) {
stop("'ar' can't be null while 'ar_mod' is specified")
}
if (!is.null(ma_mod) & is.null(ma)) {
stop("'ma' can't be null while 'ma_mod' is specified")
}
if (!(1 %in% fdiff) & (1 %in% conv)) {
stop("'conv' can't be true if fdiff models aren't in")
}
if (any(paste0("FE_", re_coef) %in% xvar == F) & !is.null(re_coef)) {
stop("Random coefficients MUST have a counterpart fixed effect")
}
if (is.null(xvar)) {
tmp <- (rep(list(0), 1))
regMat <- data.table(do.call(expand.grid, tmp))
}
else {
if (!is.null(re_coef)) {
tmp <- (rep(list(0:2), eval(length(xvar))))
regMat <- data.table(do.call(expand.grid, tmp))
colnames(regMat) <- c(xvar)
for (bads in setdiff(xvar, paste0("FE_", re_coef))) {
regMat <- regMat[get(bads) != 2]
}
}
else {
tmp <- (rep(list(0:1), eval(length(xvar))))
regMat <- data.table(do.call(expand.grid, tmp))
colnames(regMat) <- c(xvar)
}
}
regMat <- duplicate_switch(data = regMat, param_name = "ar",
param_domain = ar)
regMat <- duplicate_switch(data = regMat, param_name = "ar_mod",
param_domain = c(0, ar_mod))
regMat <- regMat[!(ar == 0 & ar_mod > 0)]
regMat <- regMat[!(ar != 0 & ar_mod == 0)]
regMat <- duplicate_switch(data = regMat, param_name = "ar_constrain",
param_domain = ar_constrain)
regMat <- regMat[ar == 0, `:=`(ar_constrain, 0)]
regMat <- unique(regMat)
regMat <- duplicate_switch(data = regMat, param_name = "ma",
param_domain = ma)
regMat <- duplicate_switch(data = regMat, param_name = "ma_mod",
param_domain = c(0, ma_mod))
regMat <- regMat[!(ma == 0 & ma_mod > 0)]
regMat <- regMat[!(ma != 0 & ma_mod == 0)]
regMat <- duplicate_switch(data = regMat, param_name = "weight_decay",
param_domain = weight_decays)
regMat <- duplicate_switch(data = regMat, param_name = "global_int",
param_domain = global_int)
regMat <- duplicate_switch(data = regMat, param_name = "country_int",
param_domain = country_int)
if (country_int_dist) {
regMat[, `:=`(country_int_dist, 1)]
}
else {
regMat[, `:=`(country_int_dist, 0)]
}
regMat <- duplicate_switch(data = regMat, param_name = "fdiff",
param_domain = fdiff)
regMat <- duplicate_switch(data = regMat, param_name = "conv",
param_domain = conv)
regMat <- regMat[!(fdiff == 0 & conv == 1)]
regMat <- duplicate_switch(data = regMat, param_name = "scaled_lev_conv",
param_domain = scaled_lev_conv)
regMat <- regMat[!(fdiff == 0 & scaled_lev_conv == 1)]
regMat <- duplicate_switch(data = regMat, param_name = "int_decay",
param_domain = int_decay)
regMat <- regMat[!(country_int == 0 & int_decay == 1)]
regMat <- duplicate_switch(data = regMat, param_name = "yvar",
param_domain = yvar)
if (is.null(xvar)) {
regMat[, `:=`(Var1, NULL)]
}
regMat <- unique(regMat)
regMat[, `:=`(id, .I)]
return(regMat)
}
duplicate_switch <- function (data, param_name, param_domain)
{
if (length(param_domain) > 0 & !is.null(param_domain)) {
tmpcol <- colnames(data)
data <- data[rep(1:.N, length(param_domain))][, `:=`((param_name),
param_domain), by = tmpcol]
}
else {
data[, `:=`((param_name), 0)]
}
return(data)
}
full_grid <- do.call(create_ensemble_grid, ensemble_metadata)
require(data.table)
full_grid <- do.call(create_ensemble_grid, ensemble_metadata)
View(full_grid)
fwrite(full_grid, "~/test_the.csv")
pwd
!pwd
fwrite(full_grid, "~/Desktop/test_the.csv")
Sys.info()["sysname"]
install.packages("auto.arima")
rm(list = ls())
require(data.table)
require(ggplot2)
library(grid)
library(gridExtra)
library(scales)
setwd("~/Desktop/UW/DATA_512/repos/data-512-final-project/data_raw/")
### Read in cleaned data
sal <- fread("../data_clean/edu_salaries.csv")
prof <- c("ADJUNCT PROF", "ASSISTANT PROF", "ASSOCIATE PROF", "ASSOC PROF", "ADJ PROF",
"ASST PROF", "CLIN PROF", "PROF IN RESHCOMP", "PROF OF CLINHCOMP", "PROFHCOMP","INSTRHCOMP",
"PROFAY", "TEACHING ASSOCIATE", "FTFTENURE TRACK", "TEACH TNRD SR ASSOCIATE", "PROFESSOR",
"TEACHING ASSOCIATE", "FACULTY", "TEACHER", "LECTURER", "INSTRUCTOR", "INSTR ","INSTR,", "LECTAY")
non_prof <- c("TEACHING ASSOCIATE", "FACULTY", "TEACHER", "LECTURER", "INSTRUCTOR", "INSTR ","INSTR,", "LECTAY")
student <- c("STDT", "TEACHG ASST", "STUDENT ASSISTANT", "STUDENT WORK", "STUDENT EMPLOYEE", "GRADUATE ", "TUTNON GSHIP",
"GSR", "GSI", "TUTOR", "TEACHING ASSISTANT", "STUDENT TRAINEE", "INTERN ", "POSTDOC","TUTGSHIP", "STUDENT 2","STUDENT 3","STUDENT 1", "READERGSHIP",
"GRAD ", "STUDENT HELP", "STUDENT/SHORTTERM", "STUDENT AIDE", "STUDENT HOURLY", "INSTRUCTIONAL ASSISTANT", "STUDENT  NON",
"STUDENT ;", "STUDENT ASST", "SSTUDENT ;", "STUDENT/HOURLY STAFF ;", "TEMPORARYSTUDENT SUPPORT")
executive <- c("CEO", "DEAN", "CHAIR", "DIRECTOR", "PRESIDENT", "PROVOST", "CHANCELLOR", "DIR", "VP", "V PROV", "BOARD MEMBER", " VC ")
sports <- c("COACH", "FOOTBALL", "BASKETBALL", "SPORTS", "ATHLETIC TRAINER", "ATH TRAINER")
admin <- c("LIBRAR", "COUNSELOR", "COUNSELING", "STUDENT SERVICE", "PROGRAM ASSISTANT", "SPECIALIST", "COORD", "SUPPORT STAFF", "TUTNON STDNT",
"PROGRAM OPERATIONS", "RECREATION PRG", "EARLY CHILDHOOD SP", "EARLY CHILD PROG", "SOCIAL WORK", "CHILD CARE","TEMPORARY NON STUDENT",
"RESEARCH CONSULTANT", "ANALYST", "MAINTENANCE", "SKILLED TRADES WORKER","COLLEGE ASSISTANT", "ASSISTANT TO THE ",
"ADMINISTRATOR", "ADMIN ", "ADMINISTRATIVE", " IT ", "INFORMATION TECH", "EXEC AS", "ASST TO ", "EXECUTIVE AS", "ADM AS","ADMASST","ASSISTANT TO",
"INFORMATION SYSTEM", "COMPUT", "PROGRAMMER", "SOFTWARE ENGINEER", "MGR", "MNGR", "MANAGER", "ACCOUNTING","ACCOUNTANT",
"FISCAL", "FINANC", "BUDGET", "GRAPHIC DESIGNER","SECURITY GUARD","CAMPUS SECURITY","CAMPUS PATROL", "SECURITY OFFICER","POLICE", "POL OFCR",
"CUSTODIA", "JANITOR", "FOOD ", "SERVICE WORKER", "PROGR ANL", "ANL 1","ANL 3", "ANL 2", "ANL 4","ANL 5", "PUBLIC SFTY", "GRANT WRITER",
"SECRETARY", "PROF STAFF", "OFFICE ASSISTANT", "TEMPORARY STAFF", "TECHNOLOGIST", "FACILITIES", "CASHIER","CUSTOMER SERVICE",
"DEVELOPMENT SERVICES", "TECHNICAL", "CLERICAL", "ADM COUNS","PATIENT BILLER", "CLERK","GENERAL ASSISTANT","MGT SVC OFCR",
"COOK", "CATERING", "PROFESSIONAL", "BLANK AST", "GROUNDS", "CLERK SR OR SECR", "ADM CRD OFCR", "MEDIA TECHNICIAN", "MECHANIC",
"INTRPRTR", "INTERPRETER", "ADVISOR", "CONSULTANT", "CASUAL WORKER", "CASUAL EMPLOYEE", "BUILDING SERVICE", "ELECTRICIAN", "SUPERVISOR",
"PAINTER", "PART TIME HOURLY STAFF", "INSTR&CLASSROOM SUPT TCH","INSTRUCTION & CLASSROOM SUPPORT TECH ", "USHER", "BILLER",
"CONTIN ED PT CONTRACT", "SPECIAL CONTRACTS", "PROGRAM SUPPORT", "TEMP HRLY, NON STUDENT", "BOOKSTORE BUYER", "APPLICATIONS PROGR", "APPLICATION DEVELOPER",
"EDUCATIONAL PLANNER", "CREDENTIALS EVALUATOR", "CHILD DEVELOPMENT CENTER ASSISTANT", "LIFEGUARD", "ADMISSIONS & RECORDS ASSISTANT",
"AUTO EQUIP OPR", "CAMP CNSLR", "ELECTRN", "RESEARCH ASSOCIATE", "SRA ", "RESEARCH SCIENTIST", "RESEARCH STUDY ASSISTANT","RESEARCH ASSISTANT",
"LAB AST", "ASST RESFY", "LECT IN SUMMER SESSION", "MOONLIGHT APPOINTMENT", "MOONLIGHT INSTRUCTION", "INSTRUCTIONAL AIDE", "INSTRUCTIONAL ASST",
"PARTTIME INSTRUCTION", "CLASSIFIED S/T TEMP, SUB", "STDT AFFAIRS OFCR", "STDT DISABILITY SPEC", "STDT ACAD SPEC", "CUSTOMER SVC")
medical <- c("NURSE ", " RESIDENT ", "RESID PHYS", "PHYSCN", "HOSP BLANK", "PATIENT SERVICES", "PATIENT CARE", "HOSPITAL ASSISTANT", "SENIOR FELLOW","FELLOW ACGME",
"MEDICAL ASSISTANT", "CLINICAL ASSISTANT", "PHARMAC", "RESPIRATORY CARE PRACTITIONER", "CLINICAL TECHNOLOGIST", "BLDG MAINT WORKER",
"MEDICAL LABORATORY", "IMAGING TECHNOLOGIST", "PRECEPTOR", "SRA 2 NEX", "CLIN LAB SCI", "CLIN RSCH CRD", "MED AST ",
"HOSP LAB", "POSTMD", "REG RESP THER", "MED OFC SVC CRD", "DENTIST", "HOSP UNIT", "CLIN CARE PARTNER", "PHLEBOTOMIST", "HOSP AST SR",
"SURGICAL TCHN", "STERILE PROCESSING TCHN", "RADLG TCHNO SR", "DENTAL HYGIENE")
profl = paste(prof, collapse="|")
non_profl = paste(non_prof, collapse="|")
studentl = paste(student, collapse="|")
executivel = paste(executive, collapse="|")
sportsl = paste(sports, collapse="|")
adminl = paste(admin, collapse="|")
medicall = paste(medical, collapse="|")
sal[grepl(medicall, title), `Job type` := "Medical"]
sal[grepl(studentl, title), `Job type` := "Student"]
sal[grepl(profl, title), `Job type` := "Professors"]
sal[grepl(executivel, title), `Job type` := "Executive"]
sal[grepl(adminl, title), `Job type` := "Administrative"]
sal[grepl(sportsl, title), `Job type` := "Athletics"]
sal[is.na(`Job type`), `Job type` := "Unclassified"]
# manual fixes
sal[title %in% c("VP, ADMIN SERVICES", "VP OF ADMINISTRATIVE SVCS", "VP ADMIN/FINANCE", "VP STUDENT SERVICES",
"VP, ADMINISTRATIVE SERVICE", "VP ADMINISTRATIVE SVC", "VPSTUDENT SERVICES", "VP FINANCIAL SERVICES",
"VP OF STUDENT SERVICES", "VP ADMINISTRATIVE SERVICES", "VP OF INSTR ", "VP TECHNOLOGY & FISCAL SRV",
"VP ADMINISTRATIVE SRVS", "VP BUSINESS &FINANCIAL AFFAIRS", "VP FOR FINANCE"), `Job type` := "Executive"]
sal[grepl("HOSPITALASSOCIATE", title), `Job type` := "Medical"]
sal[grepl(executivel, title) & `Job type`=="Administrative" & !grepl("ADMIN", title) & !grepl("EXEC AS", title) &
!grepl("ADM AS", title) & !grepl("ADMASST", title) & !grepl("ASST TO ", title) &
!grepl("ASSISTANT TO", title) & !grepl("EXECUTIVE AS", title) & !grepl("LIFEGUARD", title) &
!grepl("TEMPORARY AS", title) & !grepl("AST TO", title), `Job type` := "Executive"]
sal[grepl("OFFICE OF THE VP", title) | grepl("PRESIDENTS OFFICE", title) | grepl("OFFICE OF THE CHANCELLOR", title), `Job type` := "Administrative"]
sal[grepl(profl, title) & `Job type`=="Administrative" & !grepl("ADMIN", title), `Job type` := "Professors"]
sal[title == "FELLOW", `Job type` := "Medical"]
sal[grepl("PRODUCER DIR|RSDT DIR", title), `Job type` := "Administrative"]
sal[grepl("ENGINEER", title) & `Job type`=="Unclassified", `Job type` := "Administrative"]
#nrow(sal[year==2018 & `Job type`=="Unclassified"])/nrow(sal[year==2018])
# group all agencies
sal[grepl("College", employer), employer := " Colleges"]
sal[, employer := paste0(state, " - ", employer)]
# calculate total employees and salaries by agency, year, and job type
sal_jobs <- sal[, .(tot = .N), by = c("year", "employer", "Job type")]
sal_totals <- sal[, .(tot = sum(salary)), by = c("year", "employer", "Job type")]
### Problem 2: how to address employees with super low salaries - likely part time or only worked a little
sal[`Job type` == "Professors" & grepl(non_profl, title), `Job type` := "Unclassified"]
med_sal <- sal[, .(median_salary = median(salary)), by= c("year", "employer", "Job type")]
ggplot(med_sal[`Job type` != "Unclassified"], aes(x=year, y=median_salary, group = employer)) +
geom_line(aes(colour = employer)) + facet_wrap(~`Job type`, scales = "free")
med_sal <- sal[, .(median_salary = median(salary)), by= c("year", "state", "Job type")]
ggplot(med_sal[`Job type` != "Unclassified"], aes(x=year, y=median_salary, group = employer)) +
geom_line(aes(colour = employer)) + facet_wrap(~`Job type`, scales = "free")
ggplot(med_sal[`Job type` != "Unclassified"], aes(x=year, y=median_salary, group = state)) +
geom_line(aes(colour = employer)) + facet_wrap(~`Job type`, scales = "free")
ggplot(med_sal[`Job type` != "Unclassified"], aes(x=year, y=median_salary, group = state)) +
geom_line(aes(colour = state)) + facet_wrap(~`Job type`, scales = "free")
ggplot(med_sal[`Job type` != "Unclassified"], aes(x=year, y=median_salary, group = state)) +
geom_line(aes(colour = state)) + facet_wrap(~`Job type`)
ggplot(sal[year == 2018 & `Job type` != "Unclassified"], aes(x=employer, y=salary, group = employer)) +
geom_boxplot(aes(colour = employer)) + facet_wrap(~`Job type`, scales = "free") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
rm(list = ls())
require(data.table)
require(stringr)
require(readxl)
setwd("~/Desktop/UW/DATA_512/repos/data-512-final-project/data_raw/")
############# SALARY DATA
# append all WA state salary data from the different files
wa_salaries_2010_2013 <- fread("./WA_Annual_Salary_2010_2013.csv")
setnames(wa_salaries_2010_2013, c("Agency", "AgencyTitle", "Salary2010", "Salary2011", "Salary2012", "Salary2013"),
c("Agy", "AgyTitle", "Sal2010", "Sal2011", "Sal2012", "Sal2013"))
wa_salaries_2014_2018_1 <- fread("./WA_Annual_Salary_2014_2018_1.csv")
wa_salaries_2014_2018_2 <- fread("./WA_Annual_Salary_2014_2018_2.csv")
wa_salaries_2014_2018 <- rbind(wa_salaries_2014_2018_1, wa_salaries_2014_2018_2)
WA_salaries <- rbind(wa_salaries_2010_2013, wa_salaries_2014_2018, fill = T)
WA_salaries <- melt(WA_salaries, id.vars = c("Agy", "AgyTitle", "JobTitle"), variable.name = "year", value.name = "salary")
WA_salaries <- WA_salaries[, year := str_replace(year, "Sal", "")]
WA_salaries <- WA_salaries[, year := as.numeric(as.character(year))]
WA_salaries <- WA_salaries[, .(year, employer = AgyTitle, title = JobTitle, salary, state = "WA")]
# filter WA data to only higher education institutions
WA_salaries <- WA_salaries[grepl("College", employer) | grepl("University", employer)]
# append all CA state salary data from the different files
# Files were downloaded from https://publicpay.ca.gov/Reports/RawExport.aspx, downloading only 2010-2018 data for California State University, Community College District, and University of California
# CSU data is available 2010-2018, community college data is available 2011-2018, UC data is available 2013-2018.
csu_files <- list.files(pattern="*_CaliforniaStateUniversity.csv", full.names=TRUE)
uc_files <- list.files(pattern="*_UniversityOfCalifornia.csv", full.names=TRUE)
colleges_files <- list.files(pattern="*_CommunityCollegeDistrict.csv", full.names=TRUE)
all_files <- c(csu_files, uc_files, colleges_files)
# loop over all CA state higher education institution employee data and append together
CA_salaries <- fread(all_files[1])
for (i in 2:length(all_files)) {
# load file
dt <- fread(all_files[i])
CA_salaries <- rbind(CA_salaries, dt, fill = T)
}
CA_salaries[EmployerType == "Community College District", EmployerType := EmployerName]
# need to pull TotalWages rather than RegularPay as salary, since WA salaries data per the FAQ contains "The total annual earnings include the base pay and any additional compensation or premiums such as overtime, call-back, standby or assignment pay."
# Note the two position fields - we append these two together in order to get more detailed info, same with employer info
CA_salaries <- CA_salaries[, .(year = Year, employer = EmployerType,
title = paste(Position, ";", OtherPositions), salary = TotalWages, state = "CA")]
# fix strangely encoded characters so we can uppercase them
CA_salaries[, title := toupper(iconv(title, from = "latin1", to = "UTF-8"))]
# append WA and CA salary data and save out cleaned file
salaries <- rbind(WA_salaries, CA_salaries, fill = T)
salaries <- salaries[!(is.na(salary)) & salary > 0]
salaries[, title := gsub("[.]","",title)]
salaries[, title := gsub("-","",title)]
salaries <- salaries[, title := paste0(" ", title, " ")]
fwrite(salaries[year == 2018], "../data_clean/edu_salaries.csv")
nrow(sal[year==2018 & `Job type`=="Unclassified"])/nrow(sal[year==2018])
rm(list = ls())
require(data.table)
require(ggplot2)
library(grid)
library(gridExtra)
library(scales)
setwd("~/Desktop/UW/DATA_512/repos/data-512-final-project/data_raw/")
### Read in cleaned data
### problem 1: many job titles
# job title classification strategy: pick out a few major groups to focus on and put all others into other category. review the titles put into a category to ensure the string matching is not picking up something wrong
# strategies: check for listts of types of univ employees, find most common words in job titles (overall and by agency), browse titles by institution to pick out similar classes under different names, clustering by title and pay, reviewing hits by keyword lists to reduce false positives, and check on others to reduce false negatives
# job lists usd to guide this process: https://ap.washington.edu/ahr/academic-titles-ranks/ and https://ucnet.universityofcalifornia.edu/system_series/ and https://www.ucop.edu/academic-personnel-programs/_files/acad-title-codes/academic-titles-sorted-title-name.pdf
#sort(table(sal$title), decreasing=T)[1:50]
# sort(table(sal[employer=="CA - University of California" & `Job type` == "other"]$title), decreasing=T)[1:50]
prof <- c("ADJUNCT PROF", "ASSISTANT PROF", "ASSOCIATE PROF", "ASSOC PROF", "ADJ PROF",
"ASST PROF", "CLIN PROF", "PROF IN RESHCOMP", "PROF OF CLINHCOMP", "PROFHCOMP","INSTRHCOMP",
"PROFAY", "TEACHING ASSOCIATE", "FTFTENURE TRACK", "TEACH TNRD SR ASSOCIATE", "PROFESSOR",
"TEACHING ASSOCIATE", "FACULTY", "TEACHER", "LECTURER", "INSTRUCTOR", "INSTR ","INSTR,", "LECTAY")
non_prof <- c("TEACHING ASSOCIATE", "FACULTY", "TEACHER", "LECTURER", "INSTRUCTOR", "INSTR ","INSTR,", "LECTAY")
student <- c("STDT", "TEACHG ASST", "STUDENT ASSISTANT", "STUDENT WORK", "STUDENT EMPLOYEE", "GRADUATE ", "TUTNON GSHIP",
"GSR", "GSI", "TUTOR", "TEACHING ASSISTANT", "STUDENT TRAINEE", "INTERN ", "POSTDOC","TUTGSHIP", "STUDENT 2","STUDENT 3","STUDENT 1", "READERGSHIP",
"GRAD ", "STUDENT HELP", "STUDENT/SHORTTERM", "STUDENT AIDE", "STUDENT HOURLY", "INSTRUCTIONAL ASSISTANT", "STUDENT  NON",
"STUDENT ;", "STUDENT ASST", "SSTUDENT ;", "STUDENT/HOURLY STAFF ;", "TEMPORARYSTUDENT SUPPORT")
executive <- c("CEO", "DEAN", "CHAIR", "DIRECTOR", "PRESIDENT", "PROVOST", "CHANCELLOR", "DIR", "VP", "V PROV", "BOARD MEMBER", " VC ")
sports <- c("COACH", "FOOTBALL", "BASKETBALL", "SPORTS", "ATHLETIC TRAINER", "ATH TRAINER")
admin <- c("LIBRAR", "COUNSELOR", "COUNSELING", "STUDENT SERVICE", "PROGRAM ASSISTANT", "SPECIALIST", "COORD", "SUPPORT STAFF", "TUTNON STDNT",
"PROGRAM OPERATIONS", "RECREATION PRG", "EARLY CHILDHOOD SP", "EARLY CHILD PROG", "SOCIAL WORK", "CHILD CARE","TEMPORARY NON STUDENT",
"RESEARCH CONSULTANT", "ANALYST", "MAINTENANCE", "SKILLED TRADES WORKER","COLLEGE ASSISTANT", "ASSISTANT TO THE ",
"ADMINISTRATOR", "ADMIN ", "ADMINISTRATIVE", " IT ", "INFORMATION TECH", "EXEC AS", "ASST TO ", "EXECUTIVE AS", "ADM AS","ADMASST","ASSISTANT TO",
"INFORMATION SYSTEM", "COMPUT", "PROGRAMMER", "SOFTWARE ENGINEER", "MGR", "MNGR", "MANAGER", "ACCOUNTING","ACCOUNTANT",
"FISCAL", "FINANC", "BUDGET", "GRAPHIC DESIGNER","SECURITY GUARD","CAMPUS SECURITY","CAMPUS PATROL", "SECURITY OFFICER","POLICE", "POL OFCR",
"CUSTODIA", "JANITOR", "FOOD ", "SERVICE WORKER", "PROGR ANL", "ANL 1","ANL 3", "ANL 2", "ANL 4","ANL 5", "PUBLIC SFTY", "GRANT WRITER",
"SECRETARY", "PROF STAFF", "OFFICE ASSISTANT", "TEMPORARY STAFF", "TECHNOLOGIST", "FACILITIES", "CASHIER","CUSTOMER SERVICE",
"DEVELOPMENT SERVICES", "TECHNICAL", "CLERICAL", "ADM COUNS","PATIENT BILLER", "CLERK","GENERAL ASSISTANT","MGT SVC OFCR",
"COOK", "CATERING", "PROFESSIONAL", "BLANK AST", "GROUNDS", "CLERK SR OR SECR", "ADM CRD OFCR", "MEDIA TECHNICIAN", "MECHANIC",
"INTRPRTR", "INTERPRETER", "ADVISOR", "CONSULTANT", "CASUAL WORKER", "CASUAL EMPLOYEE", "BUILDING SERVICE", "ELECTRICIAN", "SUPERVISOR",
"PAINTER", "PART TIME HOURLY STAFF", "INSTR&CLASSROOM SUPT TCH","INSTRUCTION & CLASSROOM SUPPORT TECH ", "USHER", "BILLER",
"CONTIN ED PT CONTRACT", "SPECIAL CONTRACTS", "PROGRAM SUPPORT", "TEMP HRLY, NON STUDENT", "BOOKSTORE BUYER", "APPLICATIONS PROGR", "APPLICATION DEVELOPER",
"EDUCATIONAL PLANNER", "CREDENTIALS EVALUATOR", "CHILD DEVELOPMENT CENTER ASSISTANT", "LIFEGUARD", "ADMISSIONS & RECORDS ASSISTANT",
"AUTO EQUIP OPR", "CAMP CNSLR", "ELECTRN", "RESEARCH ASSOCIATE", "SRA ", "RESEARCH SCIENTIST", "RESEARCH STUDY ASSISTANT","RESEARCH ASSISTANT",
"LAB AST", "ASST RESFY", "LECT IN SUMMER SESSION", "MOONLIGHT APPOINTMENT", "MOONLIGHT INSTRUCTION", "INSTRUCTIONAL AIDE", "INSTRUCTIONAL ASST",
"PARTTIME INSTRUCTION", "CLASSIFIED S/T TEMP, SUB", "STDT AFFAIRS OFCR", "STDT DISABILITY SPEC", "STDT ACAD SPEC", "CUSTOMER SVC")
medical <- c("NURSE ", " RESIDENT ", "RESID PHYS", "PHYSCN", "HOSP BLANK", "PATIENT SERVICES", "PATIENT CARE", "HOSPITAL ASSISTANT", "SENIOR FELLOW","FELLOW ACGME",
"MEDICAL ASSISTANT", "CLINICAL ASSISTANT", "PHARMAC", "RESPIRATORY CARE PRACTITIONER", "CLINICAL TECHNOLOGIST", "BLDG MAINT WORKER",
"MEDICAL LABORATORY", "IMAGING TECHNOLOGIST", "PRECEPTOR", "SRA 2 NEX", "CLIN LAB SCI", "CLIN RSCH CRD", "MED AST ",
"HOSP LAB", "POSTMD", "REG RESP THER", "MED OFC SVC CRD", "DENTIST", "HOSP UNIT", "CLIN CARE PARTNER", "PHLEBOTOMIST", "HOSP AST SR",
"SURGICAL TCHN", "STERILE PROCESSING TCHN", "RADLG TCHNO SR", "DENTAL HYGIENE")
profl = paste(prof, collapse="|")
non_profl = paste(non_prof, collapse="|")
studentl = paste(student, collapse="|")
executivel = paste(executive, collapse="|")
sportsl = paste(sports, collapse="|")
adminl = paste(admin, collapse="|")
medicall = paste(medical, collapse="|")
sal[grepl(medicall, title), `Job type` := "Medical"]
sal[grepl(studentl, title), `Job type` := "Student"]
sal[grepl(profl, title), `Job type` := "Professors"]
sal[grepl(executivel, title), `Job type` := "Executive"]
sal[grepl(adminl, title), `Job type` := "Administrative"]
sal[grepl(sportsl, title), `Job type` := "Athletics"]
sal[is.na(`Job type`), `Job type` := "Unclassified"]
# manual fixes
sal[title %in% c("VP, ADMIN SERVICES", "VP OF ADMINISTRATIVE SVCS", "VP ADMIN/FINANCE", "VP STUDENT SERVICES",
"VP, ADMINISTRATIVE SERVICE", "VP ADMINISTRATIVE SVC", "VPSTUDENT SERVICES", "VP FINANCIAL SERVICES",
"VP OF STUDENT SERVICES", "VP ADMINISTRATIVE SERVICES", "VP OF INSTR ", "VP TECHNOLOGY & FISCAL SRV",
"VP ADMINISTRATIVE SRVS", "VP BUSINESS &FINANCIAL AFFAIRS", "VP FOR FINANCE"), `Job type` := "Executive"]
sal[grepl("HOSPITALASSOCIATE", title), `Job type` := "Medical"]
sal[grepl(executivel, title) & `Job type`=="Administrative" & !grepl("ADMIN", title) & !grepl("EXEC AS", title) &
!grepl("ADM AS", title) & !grepl("ADMASST", title) & !grepl("ASST TO ", title) &
!grepl("ASSISTANT TO", title) & !grepl("EXECUTIVE AS", title) & !grepl("LIFEGUARD", title) &
!grepl("TEMPORARY AS", title) & !grepl("AST TO", title), `Job type` := "Executive"]
sal[grepl("OFFICE OF THE VP", title) | grepl("PRESIDENTS OFFICE", title) | grepl("OFFICE OF THE CHANCELLOR", title), `Job type` := "Administrative"]
sal[grepl(profl, title) & `Job type`=="Administrative" & !grepl("ADMIN", title), `Job type` := "Professors"]
sal[title == "FELLOW", `Job type` := "Medical"]
sal[grepl("PRODUCER DIR|RSDT DIR", title), `Job type` := "Administrative"]
sal[grepl("ENGINEER", title) & `Job type`=="Unclassified", `Job type` := "Administrative"]
### Read in cleaned data
sal <- fread("../data_clean/edu_salaries.csv")
length(unique(sal$title)) # Almost 250k unique job titles, so will need to narrow these down
hist(sal$salary, xlim=c(0,200000), breaks = 1000) # lots of noise at lower end of salaries, aroun 0, probably due to noise in employees working only temporary jobs or partial years. since we don't have more granular length of work, we'll have to find a strategy to deal with this noise
### problem 1: many job titles
# job title classification strategy: pick out a few major groups to focus on and put all others into other category. review the titles put into a category to ensure the string matching is not picking up something wrong
# strategies: check for listts of types of univ employees, find most common words in job titles (overall and by agency), browse titles by institution to pick out similar classes under different names, clustering by title and pay, reviewing hits by keyword lists to reduce false positives, and check on others to reduce false negatives
# job lists usd to guide this process: https://ap.washington.edu/ahr/academic-titles-ranks/ and https://ucnet.universityofcalifornia.edu/system_series/ and https://www.ucop.edu/academic-personnel-programs/_files/acad-title-codes/academic-titles-sorted-title-name.pdf
#sort(table(sal$title), decreasing=T)[1:50]
# sort(table(sal[employer=="CA - University of California" & `Job type` == "other"]$title), decreasing=T)[1:50]
prof <- c("ADJUNCT PROF", "ASSISTANT PROF", "ASSOCIATE PROF", "ASSOC PROF", "ADJ PROF",
"ASST PROF", "CLIN PROF", "PROF IN RESHCOMP", "PROF OF CLINHCOMP", "PROFHCOMP","INSTRHCOMP",
"PROFAY", "TEACHING ASSOCIATE", "FTFTENURE TRACK", "TEACH TNRD SR ASSOCIATE", "PROFESSOR",
"TEACHING ASSOCIATE", "FACULTY", "TEACHER", "LECTURER", "INSTRUCTOR", "INSTR ","INSTR,", "LECTAY")
non_prof <- c("TEACHING ASSOCIATE", "FACULTY", "TEACHER", "LECTURER", "INSTRUCTOR", "INSTR ","INSTR,", "LECTAY")
student <- c("STDT", "TEACHG ASST", "STUDENT ASSISTANT", "STUDENT WORK", "STUDENT EMPLOYEE", "GRADUATE ", "TUTNON GSHIP",
"GSR", "GSI", "TUTOR", "TEACHING ASSISTANT", "STUDENT TRAINEE", "INTERN ", "POSTDOC","TUTGSHIP", "STUDENT 2","STUDENT 3","STUDENT 1", "READERGSHIP",
"GRAD ", "STUDENT HELP", "STUDENT/SHORTTERM", "STUDENT AIDE", "STUDENT HOURLY", "INSTRUCTIONAL ASSISTANT", "STUDENT  NON",
"STUDENT ;", "STUDENT ASST", "SSTUDENT ;", "STUDENT/HOURLY STAFF ;", "TEMPORARYSTUDENT SUPPORT")
executive <- c("CEO", "DEAN", "CHAIR", "DIRECTOR", "PRESIDENT", "PROVOST", "CHANCELLOR", "DIR", "VP", "V PROV", "BOARD MEMBER", " VC ")
sports <- c("COACH", "FOOTBALL", "BASKETBALL", "SPORTS", "ATHLETIC TRAINER", "ATH TRAINER")
admin <- c("LIBRAR", "COUNSELOR", "COUNSELING", "STUDENT SERVICE", "PROGRAM ASSISTANT", "SPECIALIST", "COORD", "SUPPORT STAFF", "TUTNON STDNT",
"PROGRAM OPERATIONS", "RECREATION PRG", "EARLY CHILDHOOD SP", "EARLY CHILD PROG", "SOCIAL WORK", "CHILD CARE","TEMPORARY NON STUDENT",
"RESEARCH CONSULTANT", "ANALYST", "MAINTENANCE", "SKILLED TRADES WORKER","COLLEGE ASSISTANT", "ASSISTANT TO THE ",
"ADMINISTRATOR", "ADMIN ", "ADMINISTRATIVE", " IT ", "INFORMATION TECH", "EXEC AS", "ASST TO ", "EXECUTIVE AS", "ADM AS","ADMASST","ASSISTANT TO",
"INFORMATION SYSTEM", "COMPUT", "PROGRAMMER", "SOFTWARE ENGINEER", "MGR", "MNGR", "MANAGER", "ACCOUNTING","ACCOUNTANT",
"FISCAL", "FINANC", "BUDGET", "GRAPHIC DESIGNER","SECURITY GUARD","CAMPUS SECURITY","CAMPUS PATROL", "SECURITY OFFICER","POLICE", "POL OFCR",
"CUSTODIA", "JANITOR", "FOOD ", "SERVICE WORKER", "PROGR ANL", "ANL 1","ANL 3", "ANL 2", "ANL 4","ANL 5", "PUBLIC SFTY", "GRANT WRITER",
"SECRETARY", "PROF STAFF", "OFFICE ASSISTANT", "TEMPORARY STAFF", "TECHNOLOGIST", "FACILITIES", "CASHIER","CUSTOMER SERVICE",
"DEVELOPMENT SERVICES", "TECHNICAL", "CLERICAL", "ADM COUNS","PATIENT BILLER", "CLERK","GENERAL ASSISTANT","MGT SVC OFCR",
"COOK", "CATERING", "PROFESSIONAL", "BLANK AST", "GROUNDS", "CLERK SR OR SECR", "ADM CRD OFCR", "MEDIA TECHNICIAN", "MECHANIC",
"INTRPRTR", "INTERPRETER", "ADVISOR", "CONSULTANT", "CASUAL WORKER", "CASUAL EMPLOYEE", "BUILDING SERVICE", "ELECTRICIAN", "SUPERVISOR",
"PAINTER", "PART TIME HOURLY STAFF", "INSTR&CLASSROOM SUPT TCH","INSTRUCTION & CLASSROOM SUPPORT TECH ", "USHER", "BILLER",
"CONTIN ED PT CONTRACT", "SPECIAL CONTRACTS", "PROGRAM SUPPORT", "TEMP HRLY, NON STUDENT", "BOOKSTORE BUYER", "APPLICATIONS PROGR", "APPLICATION DEVELOPER",
"EDUCATIONAL PLANNER", "CREDENTIALS EVALUATOR", "CHILD DEVELOPMENT CENTER ASSISTANT", "LIFEGUARD", "ADMISSIONS & RECORDS ASSISTANT",
"AUTO EQUIP OPR", "CAMP CNSLR", "ELECTRN", "RESEARCH ASSOCIATE", "SRA ", "RESEARCH SCIENTIST", "RESEARCH STUDY ASSISTANT","RESEARCH ASSISTANT",
"LAB AST", "ASST RESFY", "LECT IN SUMMER SESSION", "MOONLIGHT APPOINTMENT", "MOONLIGHT INSTRUCTION", "INSTRUCTIONAL AIDE", "INSTRUCTIONAL ASST",
"PARTTIME INSTRUCTION", "CLASSIFIED S/T TEMP, SUB", "STDT AFFAIRS OFCR", "STDT DISABILITY SPEC", "STDT ACAD SPEC", "CUSTOMER SVC")
medical <- c("NURSE ", " RESIDENT ", "RESID PHYS", "PHYSCN", "HOSP BLANK", "PATIENT SERVICES", "PATIENT CARE", "HOSPITAL ASSISTANT", "SENIOR FELLOW","FELLOW ACGME",
"MEDICAL ASSISTANT", "CLINICAL ASSISTANT", "PHARMAC", "RESPIRATORY CARE PRACTITIONER", "CLINICAL TECHNOLOGIST", "BLDG MAINT WORKER",
"MEDICAL LABORATORY", "IMAGING TECHNOLOGIST", "PRECEPTOR", "SRA 2 NEX", "CLIN LAB SCI", "CLIN RSCH CRD", "MED AST ",
"HOSP LAB", "POSTMD", "REG RESP THER", "MED OFC SVC CRD", "DENTIST", "HOSP UNIT", "CLIN CARE PARTNER", "PHLEBOTOMIST", "HOSP AST SR",
"SURGICAL TCHN", "STERILE PROCESSING TCHN", "RADLG TCHNO SR", "DENTAL HYGIENE")
profl = paste(prof, collapse="|")
non_profl = paste(non_prof, collapse="|")
studentl = paste(student, collapse="|")
executivel = paste(executive, collapse="|")
sportsl = paste(sports, collapse="|")
adminl = paste(admin, collapse="|")
medicall = paste(medical, collapse="|")
sal[grepl(medicall, title), `Job type` := "Medical"]
sal[grepl(studentl, title), `Job type` := "Student"]
sal[grepl(profl, title), `Job type` := "Professors"]
sal[grepl(executivel, title), `Job type` := "Executive"]
sal[grepl(adminl, title), `Job type` := "Administrative"]
sal[grepl(sportsl, title), `Job type` := "Athletics"]
sal[is.na(`Job type`), `Job type` := "Unclassified"]
# manual fixes
sal[title %in% c("VP, ADMIN SERVICES", "VP OF ADMINISTRATIVE SVCS", "VP ADMIN/FINANCE", "VP STUDENT SERVICES",
"VP, ADMINISTRATIVE SERVICE", "VP ADMINISTRATIVE SVC", "VPSTUDENT SERVICES", "VP FINANCIAL SERVICES",
"VP OF STUDENT SERVICES", "VP ADMINISTRATIVE SERVICES", "VP OF INSTR ", "VP TECHNOLOGY & FISCAL SRV",
"VP ADMINISTRATIVE SRVS", "VP BUSINESS &FINANCIAL AFFAIRS", "VP FOR FINANCE"), `Job type` := "Executive"]
sal[grepl("HOSPITALASSOCIATE", title), `Job type` := "Medical"]
sal[grepl(executivel, title) & `Job type`=="Administrative" & !grepl("ADMIN", title) & !grepl("EXEC AS", title) &
!grepl("ADM AS", title) & !grepl("ADMASST", title) & !grepl("ASST TO ", title) &
!grepl("ASSISTANT TO", title) & !grepl("EXECUTIVE AS", title) & !grepl("LIFEGUARD", title) &
!grepl("TEMPORARY AS", title) & !grepl("AST TO", title), `Job type` := "Executive"]
sal[grepl("OFFICE OF THE VP", title) | grepl("PRESIDENTS OFFICE", title) | grepl("OFFICE OF THE CHANCELLOR", title), `Job type` := "Administrative"]
sal[grepl(profl, title) & `Job type`=="Administrative" & !grepl("ADMIN", title), `Job type` := "Professors"]
sal[title == "FELLOW", `Job type` := "Medical"]
sal[grepl("PRODUCER DIR|RSDT DIR", title), `Job type` := "Administrative"]
sal[grepl("ENGINEER", title) & `Job type`=="Unclassified", `Job type` := "Administrative"]
nrow(sal[year==2018 & `Job type`=="Unclassified"])/nrow(sal[year==2018])
nrow(sal[year==2018 & `Job type`=="Teaching"])/nrow(sal[year==2018])
nrow(sal[year==2018 & `Job type`=="Professors"])/nrow(sal[year==2018])
nrow(sal[year==2018 & `Job type`=="Executive"])/nrow(sal[year==2018])
nrow(sal[year==2018 & `Job type`=="Medical"])/nrow(sal[year==2018])
nrow(sal[year==2018 & `Job type`=="Sports"])/nrow(sal[year==2018])
nrow(sal[year==2018 & `Job type`=="Athletic"])/nrow(sal[year==2018])
nrow(sal[year==2018 & `Job type`=="Athletics"])/nrow(sal[year==2018])
nrow(sal[year==2018 & `Job type`=="Student"])/nrow(sal[year==2018])
nrow(sal[year==2018 & `Job type`=="Administrative"])/nrow(sal[year==2018])
